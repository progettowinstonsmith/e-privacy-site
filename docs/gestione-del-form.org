#+TITLE: Manuale per l’amministratore del form su Pelican

* Scopo
Questo documento spiega come funziona il form di sottomissione talk su Pelican:
  - la variabile di configurazione in ​pelicanconf.py  
  - i template Jinja2 (form.html, grazie.html)  
  - le pagine Markdown (proposta.md, grazie.md)  
  - il JavaScript e il CSS di supporto  

* 1. Variabile di configurazione in pelicanconf.py
La variabile **PROPOSALS_OPEN** controlla se il form deve essere mostrato o nascosto.

#+BEGIN_SRC python
PROPOSALS_OPEN = True

PROPOSALS_OPEN = False
#+END_SRC

Quando Pelican genera il sito, passa `PROPOSALS_OPEN` ai template, che iniettano il JS per nascondere/mostrare il form.

Quando si cambia lo stato delle proposte è sempre necessario fare un
=rsync_upload= anche se non si tocca altro.

* 1.1. Archiviazione dei risultati e log delle email

** 1.1.1 File delle proposte raccolte
Le proposte vengono appese, in formato Org-mode, al file:
  - Path: `/home/pws/data/proposte.org`  a cui accedere tramite
    l'utente =pws= di =aaron=
  - Ogni invio genera un blocco di intestazione + dettagli del talk + schede relatori  
  - Il file è disponibile sul server e può essere scaricato o aperto con Emacs/Org  

** 1.1.2 Email inviate e log di consegna
Le notifiche vengono spedite via SMTP attraverso il MTA di sistema.  
  - Destinatario: elenco univoco delle email (statiche + talk + relatori)  
  - Ogni messaggio contiene lo stesso blocco Org-mode del file `proposte.org`  

** 1.1.3 Dove consultare lo storico delle email
Per verificare l’effettiva consegna o eventuali errori, controllare i log del MTA:
  - Debian/Ubuntu: `/var/log/mail.log`  
  - CentOS/RHEL: `/var/log/maillog`  
  - Euro-mail queue: `/var/spool/mail/` (se configurato come mailbox locale)  

** 1.1.4 Errori e retry
In caso di bounce o errori SMTP (es. “Sender address rejected”):
  - Il MTA registra un warning o un retry automatico nel log  
  - Verificare che l’indirizzo mittente (`dati@<hostname>`) sia FQDN  
  - Eventuali fallimenti critici vengono rilanciati dallo script come HTTP 500  




* 2. Template form.html
Si trova in `templates/form.html` e definisce l’HTML del form. Deve:
  - ereditare da `event.html`  
  - includere il wrapper `<div id="form_wrapper_propostatalk">`  
  - usare selettori coerenti con gli script JS  

Esempio di inizio del template:

#+BEGIN_SRC jinja
{% extends "event.html" %}

{% block content %}
  <div id="form_wrapper_propostatalk" class="form_wrapper">
    <form id="form_propostatalk" method="post" action="/cgi-bin/submit-propostatalk.py">
      <!-- qui tutti i campi input -->
    </form>
  </div>
{% endblock %}
#+END_SRC

* 3. Template grazie.html
Si trova in `templates/grazie.html`. Riceve i dati via ​sessionStorage e li rende in pagina.

#+BEGIN_SRC jinja
{% extends "event.html" %}

{% block content %}
  <div class="form_wrapper">
    <h1>Grazie per la tua proposta!</h1>
    <div id="summary"></div>
  </div>
{% raw %}
  <script>
    document.addEventListener('DOMContentLoaded', function(){
      var data = sessionStorage.getItem('lastSubmission');
      if (!data) return;
      var obj = JSON.parse(data),
          talk = obj.talk,
          speakers = obj.speakers,
          c = document.getElementById('summary'),
          html = [];
      /* qui il riepilogo in html.join() */
      if (obj.org) {
        var pre = document.createElement('pre');
        pre.textContent = obj.org;
        c.appendChild(pre);
      }
      sessionStorage.removeItem('lastSubmission');
    });
  </script>
{% endraw %}
{% endblock %}
#+END_SRC

* 4. Pagina proposta.md
Il file `content/proposta.md` (o `.rst`) deve dichiarare il template:

#+BEGIN_SRC markdown
Template: form.html
Title: Proponi un Talk
Date: 2025-07-10 12:00
Slug: proposta
#+END_SRC

All’interno del Markdown inserisci un placeholder `<div id="form_wrapper_propostatalk">`, che sarà popolato da form.html.

* 5. Pagina grazie.md
Simile a proposta.md, ma con:

#+BEGIN_SRC markdown
Template: grazie.html
Title: Grazie
Slug: grazie
#+END_SRC

* 6. JavaScript
File: `static/js/toggle-proposals.js`
  - Nasconde il form se `PROPOSALS_OPEN` è false  
  - Rileva `window.PROPOSALS_OPEN` inserito in head  

#+BEGIN_SRC js
document.addEventListener('DOMContentLoaded', function(){
  if (window.PROPOSALS_OPEN === false) {
    var form = document.getElementById('form_wrapper_propostatalk');
    if (form) {
      form.style.display = 'none';
      var msg = document.createElement('div');
      msg.className = 'proposal-closed-msg';
      msg.innerHTML = '<p>Le proposte sono al momento chiuse.</p>';
      form.parentNode.insertBefore(msg, form);
    }
  }
});
#+END_SRC

Includilo in `base.html` prima di </body>:

#+BEGIN_SRC jinja
<script src="{{ SITEURL }}/static/js/toggle-proposals.js"></script>
#+END_SRC

* 7. CSS
Aggiungi in `static/css/style.css`:

#+BEGIN_SRC css
.proposal-closed-msg {
  background: #f8d7da;
  color: #721c24;
  border: 1px solid #f5c6cb;
  padding: 1em;
  margin-bottom: 1em;
  border-radius: 4px;
}
#+END_SRC

* 8. Flusso di esecuzione di submit-propostatalk.py
Questo script gestisce la ricezione, il salvataggio e l’invio delle proposte talk. Le fasi principali sono:

** 8.1 Lettura dell’input  
Il programma legge i dati inviati via POST dal form CGI.  
- Decodifica i campi singoli e multipli  
- Raggruppa i dati del “talk” e quelli dei “relatori” in strutture separate  

** 8.2 Validazione dei campi  
Verifica la presenza e la correttezza di tutti i campi obbligatori, inclusi:  
- Email identificativa del talk  
- Nome, telefono e titolo  
- Liste di sessioni e argomenti (almeno uno)  
- Controlli “anti-spam” e checkbox/radio  
In caso di errore interrompe l’esecuzione e restituisce un 400.

** 8.3 Costruzione del testo Org-mode  
Prepara un array di righe formattate in stile Org-mode, per:  
- Intestazione della proposta con proprietà (ID, timestamp, IP, referrer…)  
- Corpo del talk (descrizione, parole-chiave, durata…)  
- Sezioni separate per ciascun relatore, con mini-proprietà e bio  

** 8.4 Append al file proposte.org  
Apre (o crea) il file `proposte.org` e ci scrive in coda il blocco precedentemente generato.  
- Gestisce directory inesistenti  
- Assicura la codifica UTF-8  
- Segnala un errore (500) se la scrittura fallisce  

** 8.5 Generazione dell’elenco dei destinatari  
Compone la lista di email a cui inviare la notifica, a partire da:  
- Destinatari statici predefiniti  
- Email identificativa del talk  
- Email di tutti i relatori  
Rimuove eventuali duplicati mantenendo l’ordine d’inserimento.

** 8.6 Invio dell’email di notifica  
Costruisce una mail in plain-text contenente lo stesso blocco Org-mode, con header SMTP (From, To, Subject…) e la spedisce via `smtplib`.  
- Gestisce eventuali errori di invio (504, ecc.)  
- Restituisce un 500 in caso di eccezione

** 8.7 Redirect alla pagina di ringraziamento  
Al termine con esito positivo invia un redirect HTTP alla pagina statica `/grazie.html`, mentre salva in sessionStorage il payload JSON di recapito (talk, relatori e testo Org) per il template “grazie.html”.

** 8.8 Logging e monitoraggio  
Registra eventuali errori e, opzionalmente, logga l’IP del mittente e il referrer per audit oppure debugging.  

* 9. Sezione codice per inserire l’Org-mode
Se desideri includere un blocco Org-mode nel template (ad es. in grazie.html), utilizza questo snippet:

#+BEGIN_SRC org
*** [SESSIONI DURATA LIVE] email@dominio
:PROPERTIES:
:ID: 123
:INVIO: 11 July 2025 9:00 pm CEST
:EMAIL: email@dominio
:TITOLO: Titolo del talk
:SESSIONI: 2GM
:LIVE: SI+
:END:
Descrizione del talk qui...
#+END_SRC

In questo modo l’amministratore potrà copiare e personalizzare la sezione Org-mode per le proprie esigenze.
